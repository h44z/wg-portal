{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"documentation/overview/","title":"Overview","text":"<p>WireGuard Portal is a simple, web based configuration portal for WireGuard. The portal uses the WireGuard wgctrl library to manage existing VPN interfaces. This allows for seamless activation or deactivation of new users, without disturbing existing VPN connections.</p> <p>The configuration portal supports using a database (SQLite, MySQL, MsSQL or Postgres), OAuth or LDAP  (Active Directory or OpenLDAP) as a user source for authentication and profile data.</p>"},{"location":"documentation/overview/#features","title":"Features","text":"<ul> <li>Self-hosted - the whole application is a single binary</li> <li>Responsive web UI written in Vue.JS</li> <li>Automatically select IP from the network pool assigned to client</li> <li>QR-Code for convenient mobile client configuration</li> <li>Sent email to client with QR-code and client config</li> <li>Enable / Disable clients seamlessly</li> <li>Generation of wg-quick configuration file (<code>wgX.conf</code>) if required</li> <li>User authentication (database, OAuth or LDAP)</li> <li>IPv6 ready</li> <li>Docker ready</li> <li>Can be used with existing WireGuard setups</li> <li>Support for multiple WireGuard interfaces</li> <li>Peer Expiry Feature</li> <li>Handle route and DNS settings like wg-quick does</li> <li>REST API for management and client deployment (coming soon)</li> </ul>"},{"location":"documentation/overview/#quick-start","title":"Quick-Start","text":"<p>The easiest way to get started is to use the provided Docker image.</p>"},{"location":"documentation/getting-started/building/","title":"Building","text":"<p>To build a standalone application, use the Makefile provided in the repository. Go version 1.22 or higher has to be installed to build WireGuard Portal. If you want to re-compile the frontend, NodeJS 18 and NPM &gt;= 9 is required.</p> <pre><code># build the frontend (optional)\nmake frontend\n\n# build the binary\nmake build\n</code></pre>"},{"location":"documentation/getting-started/docker/","title":"Docker Container","text":""},{"location":"documentation/getting-started/docker/#image-usage","title":"Image Usage","text":"<p>The preferred way to start WireGuard Portal as Docker container is to use Docker Compose.</p> <p>A sample docker-compose.yml:</p> <pre><code>version: '3.6'\nservices:\n  wg-portal:\n    image: wgportal/wg-portal:v2\n    restart: unless-stopped\n    cap_add:\n      - NET_ADMIN\n    network_mode: \"host\"\n    ports:\n      - \"8888:8888\"\n    volumes:\n      - /etc/wireguard:/etc/wireguard\n      - ./data:/app/data\n      - ./config:/app/config\n</code></pre> <p>By default, the webserver is listening on port 8888.</p> <p>Volumes for <code>/app/data</code> and <code>/app/config</code> should be used ensure data persistence across container restarts.</p>"},{"location":"documentation/getting-started/docker/#image-versioning","title":"Image Versioning","text":"<p>All images are hosted on Docker Hub at https://hub.docker.com/r/wgportal/wg-portal. There are three types of tags in the repository:</p>"},{"location":"documentation/getting-started/docker/#semantic-versioned-tags","title":"Semantic versioned tags","text":"<p>For example, <code>1.0.19</code>.</p> <p>These are official releases of WireGuard Portal. They correspond to the GitHub tags that we make, and you can see the release notes for them here: https://github.com/h44z/wg-portal/releases.</p> <p>Once these tags show up in this repository, they will never change.</p> <p>For production deployments of WireGuard Portal, we strongly recommend using one of these tags, e.g. wgportal/wg-portal:1.0.19, instead of the latest or canary tags.</p> <p>If you only want to stay at the same major or major+minor version, use either <code>v[MAJOR]</code> or <code>[MAJOR].[MINOR]</code> tags. For example <code>v1</code> or <code>1.0</code>.</p> <p>Version 1 is currently stable, version 2 is in development.</p>"},{"location":"documentation/getting-started/docker/#latest","title":"latest","text":"<p>This is the most recent build to master! It changes a lot and is very unstable.</p> <p>We recommend that you don't use it except for development purposes.</p>"},{"location":"documentation/getting-started/docker/#branch-tags","title":"Branch tags","text":"<p>For each commit in the master and the stable branch, a corresponding Docker image is build. These images use the <code>master</code> or <code>stable</code> tags.</p>"},{"location":"documentation/getting-started/docker/#configuration","title":"Configuration","text":"<p>You can configure WireGuard Portal using a yaml configuration file. The filepath of the yaml configuration file defaults to <code>/app/config/config.yml</code>. It is possible to override the configuration filepath using the environment variable WG_PORTAL_CONFIG.</p> <p>By default, WireGuard Portal uses a SQLite database. The database is stored in <code>/app/data/sqlite.db</code>.</p> <p>You should mount those directories as a volume: - /app/data - /app/config</p>"},{"location":"documentation/getting-started/docker/#configuration-options","title":"Configuration Options","text":"<p>All available YAML configuration options are available here.</p> <p>A very basic example:</p> <pre><code>core:\n  admin_user: test@wg-portal.local\n  admin_password: secret\n\nweb:\n  external_url: http://localhost:8888\n  request_logging: true\n</code></pre>"},{"location":"documentation/getting-started/upgrade/","title":"Upgrade from V1","text":"<p>For production deployments of WireGuard Portal, we strongly recommend using version 1.  If you want to use version 2, please be aware that it is still in beta and not feature complete.</p>"},{"location":"documentation/getting-started/upgrade/#upgrade-from-v1-to-v2","title":"Upgrade from v1 to v2","text":"<p> Before upgrading from V1, make sure that you have a backup of your currently working configuration files and database!</p> <p>To start the upgrade process, start the wg-portal binary with the -migrateFrom parameter. The configuration (config.yml) for WireGuard Portal must be updated and valid before starting the upgrade.</p> <p>To upgrade from a previous SQLite database, start wg-portal like:</p> <pre><code>./wg-portal-amd64 -migrateFrom=old_wg_portal.db\n</code></pre> <p>You can also specify the database type using the parameter -migrateFromType, supported types: mysql, mssql, postgres or sqlite. For example:</p> <pre><code>./wg-portal-amd64 -migrateFromType=mysql -migrateFrom=user:pass@tcp(1.2.3.4:3306)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local\n</code></pre> <p>The upgrade will transform the old, existing database and store the values in the new database specified in the config.yml configuration file. Ensure that the new database does not contain any data!</p>"}]}