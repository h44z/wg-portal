basePath: /api/v1
definitions:
  models.Error:
    properties:
      Code:
        description: HTTP status code.
        type: integer
      Details:
        description: Additional error details.
        type: string
      Message:
        description: Error message.
        type: string
    type: object
  models.User:
    properties:
      ApiEnabled:
        description: If this field is set, the user is allowed to use the RESTful
          API. This field is read-only.
        type: boolean
      ApiToken:
        description: The API token of the user. This field is never populated on bulk
          read operations.
        type: string
      Department:
        description: The department of the user. This field is optional.
        type: string
      Disabled:
        description: If this field is set, the user is disabled.
        type: boolean
      DisabledReason:
        description: The reason why the user has been disabled.
        type: string
      Email:
        description: The email address of the user. This field is optional.
        type: string
      Firstname:
        description: The first name of the user. This field is optional.
        type: string
      Identifier:
        description: The unique identifier of the user.
        type: string
      IsAdmin:
        description: If this field is set, the user is an admin.
        type: boolean
      Lastname:
        description: The last name of the user. This field is optional.
        type: string
      Locked:
        description: If this field is set, the user is locked and thus unable to log
          in to WireGuard Portal.
        type: boolean
      LockedReason:
        description: The reason why the user has been locked.
        type: string
      Notes:
        description: Additional notes about the user. This field is optional.
        type: string
      Password:
        description: The password of the user. This field is never populated on read
          operations.
        type: string
      PeerCount:
        description: The number of peers linked to the user. This field is read-only.
        type: integer
      Phone:
        description: The phone number of the user. This field is optional.
        type: string
      ProviderName:
        description: The name of the authentication provider. This field is optional.
        type: string
      Source:
        description: The source of the user. This field is optional.
        type: string
    type: object
info:
  contact:
    name: WireGuard Portal Project
    url: https://github.com/h44z/wg-portal
  description: WireGuard Portal API for managing users and peers.
  license:
    name: MIT
    url: https://github.com/h44z/wg-portal/blob/master/LICENSE.txt
  title: WireGuard Portal Public API
  version: "1.0"
paths:
  /user/all:
    get:
      operationId: users_handleAllGet
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BasicAuth: []
      summary: Get all user records.
      tags:
      - Users
  /user/id/{id}:
    delete:
      operationId: users_handleDelete
      parameters:
      - description: The user identifier
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content if deletion was successful
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BasicAuth: []
      summary: Delete the user record.
      tags:
      - Users
    get:
      description: Normal users can only access their own record. Admins can access
        all records.
      operationId: users_handleByIdGet
      parameters:
      - description: The user identifier.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BasicAuth: []
      summary: Get a specific user record by its internal identifier.
      tags:
      - Users
    put:
      description: Only admins can update existing records.
      operationId: users_handleUpdatePut
      parameters:
      - description: The user identifier
        in: path
        name: id
        required: true
        type: string
      - description: The user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BasicAuth: []
      summary: Update a user record.
      tags:
      - Users
  /user/new:
    post:
      description: Only admins can create new records.
      operationId: users_handleCreatePost
      parameters:
      - description: The user data.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BasicAuth: []
      summary: Create a new user record.
      tags:
      - Users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
